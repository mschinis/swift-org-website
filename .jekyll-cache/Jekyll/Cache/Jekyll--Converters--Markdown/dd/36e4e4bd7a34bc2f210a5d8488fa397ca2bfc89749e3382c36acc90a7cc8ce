I"-(<p>Xcode 10.0 comes with a Swift Migrator tool that helps you migrate your project to Swift 4.2.</p>

<blockquote>
  <p>For the previous release’s Migration Guide, see <a href="https://swift.org/migration-guide-swift4">Migrating to Swift 4</a>.</p>
</blockquote>

<h2 id="pre-migration-preparation">Pre-Migration Preparation</h2>

<p>Make sure that the project that you intend to migrate builds successfully in Swift 3 or Swift 4 mode, and all its tests pass. You may need to resolve errors initially due to compiler changes.</p>

<p>It’s highly recommended to have your project managed under source control. This will allow you to easily review the changes that were applied via the migration assistant and to discard them and re-try the migration if needed.</p>

<p>You decide when and if you’d like to migrate on a per-target basis when it makes sense for your project. While migrating to Swift 4.2 is definitely encouraged, it’s not an all-or-nothing process, as Swift 3, 4, and 4.2 targets can coexist and link together.</p>

<p>The migration assistant does a <em>migrator build</em> to gather the changes, using the scheme you have selected, so the targets that will get processed are the ones that are included in the scheme. To review and modify what is included in the scheme, invoke the <em>Edit Scheme…</em> sheet and select the <em>Build</em> tab from the column on the left, and make sure all your targets and their unit tests are included.</p>

<blockquote>
  <p>If your project depends on other open-source projects that are provided by Carthage or CocoaPods, consult the <a href="#using-carthagecocoapods-projects">Using Carthage/CocoaPods Projects</a> section.</p>
</blockquote>

<h2 id="swift-migration-assistant">Swift Migration Assistant</h2>

<p>When you open your project with Xcode 10 for the first time, you will see a migration opportunity item in the Issue Navigator: click it to activate a sheet asking you if you’d like to migrate. You can be reminded later or invoke the Migrator manually from the menu <em>Edit -&gt; Convert -&gt; To Current Swift Syntax…</em></p>

<p>You will be presented with a list of targets to migrate. Targets that do not contain any Swift code will not be selected.</p>

<p>If all your selected targets are in Swift 4 mode there is only one migration workflow, but for Swift 3 targets there is a choice between two kinds of <em><code class="language-plaintext highlighter-rouge">@objc</code> Inference</em>:</p>

<ul>
  <li><strong>Minimize Inference</strong>: Add an @objc attribute to your code only where it is needed based on static inference. After using this option you need to follow the manual steps detailed in Completing a Swift 4 minimize inference migration to complete the conversion.</li>
  <li><strong>Match Swift 3 Behavior</strong>: Add an @objc attribute to your code anywhere it would be implicitly inferred by the compiler. This option does not change the size of your binary as it adds explicit @objc attributes everywhere they were implicitly added by Swift 3.</li>
</ul>

<blockquote>
  <p>For more information and implications of these two choices, see the Xcode Help article <a href="https://help.apple.com/xcode/mac/current/#/deve838b19a1">Migrate to Swift 4 <code class="language-plaintext highlighter-rouge">@objc</code> inference</a>.</p>
</blockquote>

<p>Clicking <em>Next</em> will bring up the <em>Generate Preview</em> sheet and the assistant will initiate a <em>migration build</em> to get source changes. When this is done, you will be presented with all the changes that will be applied once you click on ‘Save’. This will also change the <em>Swift Language Version</em> build setting for the migrated targets to <em>Swift 4.2</em>.</p>

<p>There may have been issues with processing the targets that will negatively impact the migration process. Switch to the <em>Report Navigator</em> and select the <em>Convert</em> entry that was added; this is the conversion build log. Check the log for errors that may have showed up.</p>

<p>If you see errors about not being able to code-sign the target, try disabling code-signing from the build settings of the target. If you see other errors, please <a href="https://bugreport.apple.com">file a bug report</a> and include the details. You are strongly encouraged to attach a project that illustrates the faulty migration if possible.</p>

<h2 id="swift-42-migration-changes-overview">Swift 4.2 Migration Changes Overview</h2>

<p>The vast majority of changes that the Migrator suggests comes from data generated by a comparison of the previous SDK and the current SDK, which may drive renaming of identifiers and types, for example; and from normal <em>compiler fix-its</em>.</p>

<p>The most prevalent SDK changes are moving global constants into static type properties and transforming string constants into Swift enumeration cases. These are handled automatically by the Migrator.</p>

<p>If you migrate from Swift 3 code, also see the migration changes overview from last year’s migrator from <a href="/migration-guide-swift4/#swift-4-migration-changes-overview">Migrating to Swift 4</a>.</p>

<h2 id="after-migration">After Migration</h2>

<p>While the migrator will take care of many mechanical changes for you, it is likely that you will need to make more manual changes to be able to build the project after applying the migrator changes.</p>

<p>You may see compiler errors that have associated fixits; while the migrator is designed to incorporate fixits that the Swift 4 compiler provides, some fixits may not be applied if they are not applicable 100% of the time.</p>

<p>Even if it compiles fine, the code that the migrator provided may not be ideal. Use your best judgement and check that the changes are appropriate for your project.</p>

<p>See <a href="#known-migration-issues">Known Migration Issues</a> section, for a list of issues that you may encounter while trying to migrate your project.</p>

<h2 id="known-migration-issues">Known Migration Issues</h2>

<h3 id="sdk">SDK</h3>

<ul>
  <li>You may see errors like <code class="language-plaintext highlighter-rouge">Cannot assign value of type 'Int' to type 'UIBackgroundTaskIdentifier'</code>
    <ul>
      <li>Workaround: remove migrator-inserted conversion functions / add .rawValue as appropriate</li>
    </ul>
  </li>
  <li>You may see errors like <code class="language-plaintext highlighter-rouge">binary operator '|=' cannot be applied to two 'UIAccessibility.Traits' operands</code>
    <ul>
      <li>Workaround: <code class="language-plaintext highlighter-rouge">|</code> the raw values of the LHS and RHS, pass the result to <code class="language-plaintext highlighter-rouge">UIAccessibilityTraits(rawValue:)</code> and assign to the LHS</li>
    </ul>
  </li>
  <li>UIApplicationMain has changed the type of its second argument to match the type of <code class="language-plaintext highlighter-rouge">CommandLine.unsafeArgv</code> exactly
    <ul>
      <li>Workaround: replace the second argument with <code class="language-plaintext highlighter-rouge">CommandLine.unsafeArgv</code>.</li>
    </ul>
  </li>
  <li>For a macOS application using <code class="language-plaintext highlighter-rouge">AppKit</code> you may see errors like <code class="language-plaintext highlighter-rouge">argument labels '(rawValue:)' do not match any available overloads</code>
    <ul>
      <li>Workaround: remove the <code class="language-plaintext highlighter-rouge">rawValue:</code> argument label.</li>
    </ul>
  </li>
</ul>

<h3 id="other">Other</h3>

<ul>
  <li>Swift Migration build is ignoring <code class="language-plaintext highlighter-rouge">Other Swift Flags</code> build setting
    <ul>
      <li>Manifests as missing return error, due to conditional compilation branches with no <code class="language-plaintext highlighter-rouge">#else</code> and none of the expected -D flags being passed.</li>
      <li>Workaround: try adding <code class="language-plaintext highlighter-rouge">#else</code> clauses with an appropriate assertion / <code class="language-plaintext highlighter-rouge">fatalError()</code> as necessary prior to migration</li>
    </ul>
  </li>
  <li>Changes applied via the Swift migration assistant do not show up in the open document
    <ul>
      <li>Workaround: switch to a different file and back, and the changes will show up.</li>
    </ul>
  </li>
  <li>For a <code class="language-plaintext highlighter-rouge">main.swift</code> file, the migrator may add helper functions to the bottom of a file and they will not be available on preceding top-level expressions.
    <ul>
      <li>Workaround: move the helper functions to the start of the file after the imports.</li>
    </ul>
  </li>
</ul>

<h2 id="using-carthagecocoapods-projects">Using Carthage/CocoaPods Projects</h2>

<p>Here are some important points to consider when migrating a project with external dependencies using package managers like Carthage, CocoaPods, or the Swift Package Manager.</p>

<ul>
  <li>It is recommended to use source dependencies rather than binary Swift modules, because Swift 3.1 modules will not be compatible with Swift 3.2/4 modules, unless you can get distributions that were built in Swift 3.2 or Swift 4 mode.</li>
  <li>Make sure your source dependencies build successfully in Swift 3.2 mode as well as your own targets.</li>
  <li>If you have setup framework search paths for finding the binary Swift modules inside Carthage’s build folder, either remove the search paths or clean the build folder, so that you are sure that you are only using the Swift modules that are built from your Xcode workspace.</li>
  <li>It is not necessary to migrate your source dependencies as long as they can build in Swift 3.2 mode.</li>
</ul>

<h2 id="miscellaneous">Miscellaneous</h2>

<ul>
  <li>If you have multiple schemes in your project that cover different targets, you will only get notified that you need to migrate one of them.  You will need to manually select the new scheme, then run <em>Edit -&gt; Convert -&gt; To Current Swift Syntax</em> to migrate the remaining schemes. Or you can create a scheme that includes all the targets from your project, and have it selected before running the migration assistant.</li>
</ul>

:ET