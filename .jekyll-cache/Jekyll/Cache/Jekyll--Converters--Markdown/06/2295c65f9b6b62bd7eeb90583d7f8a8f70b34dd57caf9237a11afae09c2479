I"}P<p>Swift 5.2 is now officially released!  üéâ</p>

<p>This release focuses on improving the developer experience:</p>

<ul>
  <li>
    <p>Improved compiler diagnostics (errors and warnings) and code completion</p>
  </li>
  <li>
    <p>Increased reliability in debugging</p>
  </li>
  <li>
    <p>Improved handling of dependencies in the Swift Package Manager</p>
  </li>
  <li>
    <p>Tooling improvements with LSP and SwiftSyntax</p>
  </li>
</ul>

<p>‚Ä¶ and much more.  Further, a few additions to the language have been added that provide new capabilities for building expressive APIs.  This blog post takes a quick tour of the main changes.</p>

<h3 id="language-updates">Language Updates</h3>

<p>Swift 5.2 implements the following language proposals from the Swift Evolution process:</p>

<ul>
  <li>
    <p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0249-key-path-literal-function-expressions.md">SE-0249 Key Path Expressions as Functions</a></p>
  </li>
  <li>
    <p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0253-callable.md">SE-0253 Callable values of user-defined nominal types</a></p>
  </li>
</ul>

<p>To experience these changes, explore a <a href="https://github.com/twostraws/whats-new-in-swift-5-2">playground</a> put together by <a href="https://twitter.com/twostraws">Paul Hudson</a>.  <a href="https://twitter.com/johnsundell">John Sundell</a> has also written an article, ‚Äú<a href="https://www.swiftbysundell.com/articles/exploring-swift-5-2s-new-functional-features/">Exploring Swift 5.2‚Äôs new functional features</a>‚Äù, that illustrates the expressive capabilities of these new features.</p>

<h3 id="improved-compiler-diagnostics">Improved Compiler Diagnostics</h3>

<p>We have drastically improved the quality and precision of error messages in the Swift compiler.</p>

<p>Previously, the compiler attempted to guess the exact location of an error by breaking up an expression to search for failures in each subexpression separately. This worked well in cases where it is possible to narrow down the location of an error to a single subexpression without using any information about its parent expression. However, there were numerous kinds of programming mistakes that this strategy could not accurately identify.</p>

<p>The compiler leaves ‚Äúbreadcrumbs‚Äù when it encounters failures while inferring types in an expression, recording every specific failure along the way. These breadcrumbs allow the compiler to produce precise diagnostics, often with actionable fixes, that lead the developer toward correct code. Below are a few examples of improved error messages.</p>

<p>The following code attempts to compare an enum value with a case that doesn‚Äôt exist:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">E</span> <span class="p">{</span> <span class="k">case</span> <span class="n">one</span><span class="p">,</span> <span class="n">two</span> <span class="p">}</span>

<span class="kd">func</span> <span class="nf">check</span><span class="p">(</span><span class="nv">e</span><span class="p">:</span> <span class="kt">E</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="n">e</span> <span class="o">!=</span> <span class="o">.</span><span class="n">three</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"okay"</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Using Swift 5.1, you might be perplexed by the error message:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>error: binary operator '!=' cannot be applied to operands of type 'E' and '_'
  if e != .three {
     ~ ^  ~~~~~~
</code></pre></div></div>

<p>Using Swift 5.2, you‚Äôll see the problem right away:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>error: type 'E' has no member 'three'
  if e != .three {
          ~^~~~~
</code></pre></div></div>

<p>The next snippet of code incorrectly invokes the initializer for <code class="language-plaintext highlighter-rouge">TextField</code> in SwiftUI:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">SwiftUI</span>

<span class="kd">struct</span> <span class="kt">RoomDetails</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
  <span class="kd">@State</span> <span class="k">var</span> <span class="nv">roomName</span><span class="p">:</span> <span class="kt">String</span>
  <span class="kd">@State</span> <span class="k">var</span> <span class="nv">imageName</span><span class="p">:</span> <span class="kt">String</span>

  <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="kt">VStack</span> <span class="p">{</span>
      <span class="kt">TextField</span><span class="p">(</span><span class="s">"Room Name"</span><span class="p">)</span>

      <span class="kt">Image</span><span class="p">(</span><span class="n">imageName</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">maxWidth</span><span class="p">:</span> <span class="mi">300</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In Swift 5.1, a misleading error message appeared on a completely different line:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>error: <span class="s1">'Int'</span> is not convertible to <span class="s1">'CGFloat?'</span>
        .frame<span class="o">(</span>maxWidth: 300<span class="o">)</span>
                         ^~~
</code></pre></div></div>

<p>The Swift 5.2 compiler now correctly points out that there is a missing argument for the <code class="language-plaintext highlighter-rouge">TextField</code> initializer:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>error: missing argument <span class="k">for </span>parameter <span class="s1">'text'</span> <span class="k">in </span>call
      TextField<span class="o">(</span><span class="s2">"Room Name"</span><span class="o">)</span>
                           ^
</code></pre></div></div>

<p>This error also includes a Fix-It to insert the missing argument.</p>

<p>You can find out more about the new diagnostic architecture on a <a href="https://swift.org/blog/new-diagnostic-arch-overview/">previously published blog post</a> dedicated to that topic.</p>

<h3 id="code-completion-improvements">Code Completion Improvements</h3>

<ul>
  <li>
    <p>Faster completion by eliminating unnecessary type checking. For large files it can speed-up code completion by 1.2x to 1.6x, compared to Xcode 11.3.1, depending on the completion position.</p>
  </li>
  <li>
    <p>Now can supply names of implicit members for incomplete dictionary literals and incomplete ternary expressions:</p>

    <p><img src="/assets/images/5.2-blog/code-complete-1.png" alt="Set.intersection plot" width="100%" /></p>
  </li>
  <li>
    <p>Easier to read types when they appear in the results. Using opaque result types (e.g. <code class="language-plaintext highlighter-rouge">some View</code>) when possible and preserving typealiases. Stopped printing parent types if not necessary. For example, in Swift 5.1.3 (Xcode 11.3.1):</p>

    <p><img src="/assets/images/5.2-blog/code-complete-2.png" alt="Set.intersection plot" width="100%" /></p>

    <p>In Swift 5.2 (Xcode 11.4) this is now displayed as:</p>

    <p><img src="/assets/images/5.2-blog/code-complete-3.png" alt="Set.intersection plot" width="100%" /></p>
  </li>
</ul>

<h3 id="improved-build-algorithms">Improved Build Algorithms</h3>

<p>The Swift compiler supports two modes of operation:</p>

<ul>
  <li>
    <p>Whole Module (typically used for Release builds)</p>
  </li>
  <li>
    <p>Incremental (typically used for Debug builds)</p>
  </li>
</ul>

<p>In Xcode these can be seen in the build settings for a Swift project:</p>

<p><img src="/assets/images/5.2-blog/compilation-modes.png" alt="Swift compilation modes" width="63%" /></p>

<p>The two modes have tradeoffs in compilation speed and amount of code optimization performed. Incremental builds are great during development where not every file in the project needs to be recompiled, and maximum optimization is not critical. Whole Module Optimization gives the compiler a more complete view of the entire code base and therefore a greater ability to optimize.</p>

<p>In an Incremental mode build, the work of rebuilding a module is split among multiple <em>compilation tasks</em> that run in parallel. For every source file that is rebuilt, there is exactly one associated compilation task responsible for type checking and generating code for the declarations in that source file.</p>

<p>Since Swift declarations (such as functions, properties, types, etc.) can reference each other across source files, a compilation task will sometimes be required to type check declarations in <em>other</em> source files. This cross-file referencing of declarations can decrease efficiency of an Incremental mode build because it can duplicate type-checking work across compilation tasks.</p>

<p>In contrast, Whole Module compilation works by processing all the code in a module in one compilation task.  While there is no duplication of type checking work across compilation tasks, there is no parallelism when compiling the code in a module.  Whole Module compilation, however, gives the compiler more visibility in one go over the code in a module and thus enables more code optimizations.</p>

<p>The build time advantage of Incremental over Whole Module compilation diminishes with the amount of duplicated work each compilation task performs.  If this duplicated work is too high, it can be the case that Incremental mode does more work than Whole Module compilation.  As long as the overhead does not exceed the number of processor cores, the Incremental mode build will still be faster overall, but <strong>reducing this overhead is key to improving build times</strong>.</p>

<h4 id="making-incremental-builds-more-efficient">Making Incremental Builds more Efficient</h4>

<p>In order to minimize the wasted work done by Incremental mode builds, the Swift 5.2 compiler ‚Äî notably the type checker ‚Äî leverages a new centralized logic for caching, lazy evaluation, and dependency tracking between <em>requests</em>, where a request is a self-contained unit of computation.  This logic is now used by the compiler to more efficiently resolve declarations and their references to one another.</p>

<p>Prior to Swift 5.2, when a declaration was referenced in another source file, the type checker would explicitly perform an operation on this declaration, called <em>validation</em>. Validation made use of mutable state and was rather coarse-grained, attempting to pre-compute any number of properties of the declaration that might be needed later during code generation. This eager, pre-computation of information could often be unnecessary and wasteful.</p>

<p>In Swift 5.2, the internal representation of declarations in the compiler is immutable, and the code generation phase of the compiler is able to trigger lazy evaluation of requests, the result of which are cached. Since requests are more fine-grained than the old validation step, this improves performance by avoiding wasted work. It also improves correctness, fixing a significant number of correctness issues where the type checker did not anticipate needing to validate something that was later required for code generation.</p>

<h4 id="additional-improvements">Additional Improvements</h4>

<p>In addition to improved Incremental mode builds, the Swift 5.2 compiler includes a number of performance optimizations to foundational components such as the work the compiler does to resolve a named symbol to its declaration (i.e., name lookup).  We expect that these improvements will improve build times for both Whole Module and Incremental mode builds. Since these changes reduce the algorithmic (big-O) complexity of various algorithms inside name lookup, they should particularly help on larger projects with many source files.</p>

<h3 id="debugger-improvements">Debugger Improvements</h3>

<p>Across all platforms where Swift debugging is supported, <a href="https://lldb.llvm.org">LLDB</a> is now more resilient in reconstructing type information for Swift programs from debug information.  This resilience enables the debugger to use more information about Swift types.</p>

<p>In particular LLDB can now also import C and Objective-C types from DWARF debug information instead of compiling the Clang module from source code. This behavior can be controlled by the <code class="language-plaintext highlighter-rouge">symbols.use-swift-dwarfimporter</code> LLDB setting. By default this setting is enabled as a fallback path when the traditional Clang module import fails.</p>

<h4 id="example-xcode-variable-view-and-expression-evaluator">Example: Xcode variable view and expression evaluator</h4>

<p>To see these improvements in action, one can look at the variable view in Xcode or the LLDB expression evaluator.  To power these debugging workflows, <a href="https://lldb.llvm.org">LLDB</a> needs to import all Swift modules that are visible in the current debugging context (e.g., file, function, etc.).  While Swift modules have a wealth of information about types, Swift modules often cannot be used just on their own without depending on separate modules files produced by Clang (the C/C++/Objective-C compiler) that are used for Swift code interoperating with C and Objective-C.  Since LLDB has a global view of the entire program and all of its dynamic libraries with all their dependencies, importing Clang modules can sometimes fail.  One common failure scenario is when the search paths from different dynamic libraries are in conflict.</p>

<h3 id="swift-package-manager">Swift Package Manager</h3>

<p>Swift Package Manager in Swift 5.2 includes the following new enhancements:</p>

<ul>
  <li>
    <p>Remote Swift packages with tools version 5.2 and above no longer resolve package dependencies that are only used in their test targets, improving performance and reducing the chance of dependency version conflicts.</p>
  </li>
  <li>
    <p>Swift Package Manager uses a new strategy to resolve package dependencies that significantly improves the quality of error messages and performance in complex package graphs.</p>
  </li>
</ul>

<p>These changes were a result of discussion and review as part of the Swift Evolution process:</p>

<ul>
  <li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0226-package-manager-target-based-dep-resolution.md">SE-0226 Package Manager Target Based Dependency Resolution</a></li>
</ul>

<h3 id="swiftsyntax-updates">SwiftSyntax Updates</h3>

<p>The syntax node hierarchy in <a href="https://github.com/apple/swift-syntax">SwiftSyntax</a>‚Äôs API has been optimized by replacing protocols with structs. Consequently, tree visitation, especially when rewriting with SyntaxRewriter, is now faster.  This has resulted in improved performance during tree visitation and especially when rewriting the tree using <code class="language-plaintext highlighter-rouge">SyntaxRewriter</code>.</p>

<p>See the <a href="https://github.com/apple/swift-syntax/blob/master/Changelog.md">changelog</a> for more details on what changed in the Swift 5.2 release.</p>

<h3 id="language-server-protocol-updates">Language Server Protocol Updates</h3>

<p>Xcode 11.4 and the corresponding Command Line Tools package include the Swift 5.2 release of <a href="https://github.com/apple/sourcekit-lsp">SourceKit-LSP</a> <a href="https://microsoft.github.io/language-server-protocol/">language server</a> for Swift and C-based languages.</p>

<p>To find the <code class="language-plaintext highlighter-rouge">sourcekit-lsp</code> server executable on macOS while Xcode 11.4 is the active Xcode:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Run the server.</span>
xcrun sourcekit-lsp
<span class="c"># Get the full path to the server.</span>
xcrun <span class="nt">--find</span> sourcekit-lsp
</code></pre></div></div>

<p>SourceKit-LSP now includes support for the following LSP features:</p>

<ul>
  <li>
    <p><strong>FixIts</strong>: Swift errors, warnings and notes that include FixIts are now supported using <a href="https://microsoft.github.io/language-server-protocol/specification#textDocument_codeAction">Code Actions</a> from the Language Server Protocol.</p>
  </li>
  <li>
    <p><strong>Local Refactoring</strong>: Swift local refactorings such as extract-to-method are now supported using the ‚ÄúRefactoring‚Äù Code Action kind.</p>
  </li>
</ul>

<p>SourceKit-LSP also has a number of improvements for supporting C/C++/Objective-C code.  In particular, when determining compiler arguments for processing header files SourceKit-LSP now uses the index to lookup their main file for improved accuracy of results.</p>

<p>There are also some notable improvements for projects using JSON compilation databases (e.g. CMake projects):</p>

<ul>
  <li>
    <p>Loading time of the compilation database was sped up by up to 10x</p>
  </li>
  <li>
    <p>Indexing while building data is now supported by scraping the compilation database for the index store path arguments</p>
  </li>
</ul>

<h3 id="documentation">Documentation</h3>

<p>An updated version of <a href="https://docs.swift.org/swift-book/">The Swift Programming Language</a> for Swift 5.2 is now available on Swift.org. It is also available for free on the <a href="https://itunes.apple.com/us/book/the-swift-programming-language/id881256329?mt=11">Apple Books store</a>.</p>

<h3 id="platforms">Platforms</h3>

<h4 id="linux">Linux</h4>

<p>Official binaries for Ubuntu 18.04 and Ubuntu 16.04 are <a href="https://swift.org/download/">available for download</a>.</p>

<h4 id="apple-xcode">Apple (Xcode)</h4>

<p>For development on Apple‚Äôs platforms, Swift 5.2 ships as part of <a href="https://itunes.apple.com/app/xcode/id497799835">Xcode 11.4</a>.</p>

<p>A toolchain is also <a href="https://swift.org/download/">available for download</a> from Swift.org.</p>

<h3 id="sources">Sources</h3>

<p>Development on Swift 5.2 was tracked in the swift-5.2-branch on the following repositories on GitHub:</p>

<ul>
  <li><a href="https://github.com/apple/indexstore-db">indexstore-db</a></li>
  <li><a href="https://github.com/apple/llvm-project">llvm-project</a></li>
  <li><a href="https://github.com/apple/sourcekit-lsp">sourcekit-lsp</a></li>
  <li><a href="https://github.com/apple/swift">swift</a></li>
  <li><a href="https://github.com/apple/swift-cmark">swift-cmark</a></li>
  <li><a href="https://github.com/apple/swift-corelibs-foundation">swift-corelibs-foundation</a></li>
  <li><a href="https://github.com/apple/swift-corelibs-libdispatch">swift-corelibs-libdispatch</a></li>
  <li><a href="https://github.com/apple/swift-corelibs-xctest">swift-corelibs-xctest</a></li>
  <li><a href="https://github.com/apple/swift-integration-tests">swift-integration-tests</a></li>
  <li><a href="https://github.com/apple/swift-llbuild">swift-llbuild</a></li>
  <li><a href="https://github.com/apple/swift-package-manager">swift-package-manager</a></li>
  <li><a href="https://github.com/apple/swift-stress-tester">swift-stress-tester</a></li>
  <li><a href="https://github.com/apple/swift-syntax">swift-syntax</a></li>
  <li><a href="https://github.com/apple/swift-xcode-playground-support">swift-xcode-playground-support</a></li>
</ul>

<p>The tag <code class="language-plaintext highlighter-rouge">swift-5.2-RELEASE</code> designates the specific revisions in those repositories that make up the final version of Swift 5.2.</p>

<p>The <code class="language-plaintext highlighter-rouge">swift-5.2-branch</code> will remain open, but under the same release management process, to accumulate changes for the next release.</p>
:ET