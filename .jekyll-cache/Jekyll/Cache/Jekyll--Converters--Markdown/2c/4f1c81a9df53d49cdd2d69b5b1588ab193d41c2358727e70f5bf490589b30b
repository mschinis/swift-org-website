I"Û1<p>In June, Apple introduced Swift System, a new library for Apple platforms that provides idiomatic interfaces to system calls and low-level currency types. Today, Iâ€™m excited to announce that weâ€™re open-sourcing <a href="https://github.com/apple/swift-system">System</a> and adding Linux support! Our vision is for System to eventually act as the single home for low-level system interfaces for all supported Swift platforms.</p>

<h2 id="goodbye-imported-c-interfaces">Goodbye Imported C Interfaces</h2>

<p>Most operating systems today support some flavor of system interfaces written in C that have existed for decades. While it is possible to use these APIs directly from Swift, these weakly-typed system interfaces imported from C can be error-prone and unwieldy. For example, the <code class="language-plaintext highlighter-rouge">open</code> system call (available on UNIX-like operating systems such as Linux and Apple platforms) imports as a pair of global functions:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">open</span><span class="p">(</span><span class="n">_</span> <span class="nv">path</span><span class="p">:</span> <span class="kt">UnsafePointer</span><span class="o">&lt;</span><span class="kt">CChar</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">_</span> <span class="nv">oflag</span><span class="p">:</span> <span class="kt">Int32</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int32</span>
<span class="kd">func</span> <span class="nf">open</span><span class="p">(</span><span class="n">_</span> <span class="nv">path</span><span class="p">:</span> <span class="kt">UnsafePointer</span><span class="o">&lt;</span><span class="kt">CChar</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">_</span> <span class="nv">oflag</span><span class="p">:</span> <span class="kt">Int32</span><span class="p">,</span> <span class="n">_</span> <span class="nv">mode</span><span class="p">:</span> <span class="n">mode_t</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int32</span>
</code></pre></div></div>

<p>These weakly-typed functions suffer from several shortcomings and fail to utilize the expressivity and type safety of Swift:</p>

<ul>
  <li>
    <p>File descriptors, alongside options, commands, errno, and other values, are imported as ordinary <code class="language-plaintext highlighter-rouge">Int32</code>s.</p>
  </li>
  <li>
    <p>The <code class="language-plaintext highlighter-rouge">oflag</code> argument is actually a logical OR-ing of exactly one file access mode and any number of flags, but this is not captured in the type of <code class="language-plaintext highlighter-rouge">oflag</code>.</p>
  </li>
  <li>
    <p>Callers of <code class="language-plaintext highlighter-rouge">open</code> have to remember to check for a negative return value indicating an error, and if so check the value of the global variable <code class="language-plaintext highlighter-rouge">errno</code> to know what error occurred. Additionally, some system calls may be canceled if a signal occurred, requiring callers to remember to write a loop around such calls checking for <code class="language-plaintext highlighter-rouge">EINTR</code> errors.</p>
  </li>
  <li>
    <p>File paths are unmanaged pointers, and if they are derived from a managed object (e.g. <code class="language-plaintext highlighter-rouge">Array&lt;CChar&gt;</code>), then callers must ensure that array is always null-terminated.</p>
  </li>
</ul>

<p>None of these semantic rules are captured in the APIâ€™s signature, preventing the programming language from guiding the user towards correct usage of the API.</p>

<h2 id="hello-idiomatic-swift-interfaces">Hello Idiomatic Swift Interfaces</h2>

<p>The <code class="language-plaintext highlighter-rouge">System</code> module brings various language features to bear to improve expressivity and eliminate these opportunities for error.  For example, <code class="language-plaintext highlighter-rouge">System</code> defines the <code class="language-plaintext highlighter-rouge">open</code> system call as a static function with defaulted arguments in the <code class="language-plaintext highlighter-rouge">FileDescriptor</code> namespace:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">FileDescriptor</span> <span class="p">{</span>
  <span class="c1">/// Opens or creates a file for reading or writing.</span>
  <span class="c1">///</span>
  <span class="c1">/// - Parameters:</span>
  <span class="c1">///  - path: The location of the file to open.</span>
  <span class="c1">///  - mode: The read and write access to use.</span>
  <span class="c1">///  - options: The behavior for opening the file.</span>
  <span class="c1">///  - permissions: The file permissions to use for created files.</span>
  <span class="c1">///  - retryOnInterrupt: Whether to retry the open operation</span>
  <span class="c1">///    if it throws `Errno.interrupted`.</span>
  <span class="c1">///    The default is `true`.</span>
  <span class="c1">///    Pass `false` to try only once and throw an error upon interruption.</span>
  <span class="c1">/// - Returns: A file descriptor for the open file</span>
  <span class="c1">///</span>
  <span class="c1">/// The corresponding C function is `open`.</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">func</span> <span class="nf">open</span><span class="p">(</span>
    <span class="n">_</span> <span class="nv">path</span><span class="p">:</span> <span class="kt">FilePath</span><span class="p">,</span>
    <span class="n">_</span> <span class="nv">mode</span><span class="p">:</span> <span class="kt">FileDescriptor</span><span class="o">.</span><span class="kt">AccessMode</span><span class="p">,</span>
     <span class="nv">options</span><span class="p">:</span> <span class="kt">FileDescriptor</span><span class="o">.</span><span class="kt">OpenOptions</span> <span class="o">=</span> <span class="kt">FileDescriptor</span><span class="o">.</span><span class="kt">OpenOptions</span><span class="p">(),</span>
     <span class="nv">permissions</span><span class="p">:</span> <span class="kt">FilePermissions</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span>
     <span class="nv">retryOnInterrupt</span><span class="p">:</span> <span class="kt">Bool</span> <span class="o">=</span> <span class="kc">true</span>
  <span class="p">)</span> <span class="k">throws</span> <span class="o">-&gt;</span> <span class="kt">FileDescriptor</span>
<span class="p">}</span>
</code></pre></div></div>

<p>When one compares this version of <code class="language-plaintext highlighter-rouge">open</code> to the original version from C, several significant differences stand out:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">System</code> pervasively uses raw representable structs and option sets.  These strong types help catch mistakes at compile time and are trivial to convert to and from the weaker C types.</p>
  </li>
  <li>
    <p>Errors are thrown using the standard language mechanism and cannot be missed.  Further, all system calls interruptible by a signal take a defaulted-true <code class="language-plaintext highlighter-rouge">retryOnInterrupt</code> argument, causing them to retry on failure.  When combined, these two changes dramatically simplify error and signal handling.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">FilePath</code> is a managed, null-terminated bag-of-bytes that conforms to <code class="language-plaintext highlighter-rouge">ExpressibleByStringLiteral</code> â€” far safer to work with than a <code class="language-plaintext highlighter-rouge">UnsafePointer&lt;CChar&gt;</code>.</p>
  </li>
</ul>

<p>The result is code that reads and behaves like idiomatic Swift. For example, this code creates a file path from a string literal and uses it to open and append to a log file:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">message</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">"Hello, world!"</span> <span class="o">+</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span>
<span class="k">let</span> <span class="nv">path</span><span class="p">:</span> <span class="kt">FilePath</span> <span class="o">=</span> <span class="s">"/tmp/log"</span>
<span class="k">let</span> <span class="nv">fd</span> <span class="o">=</span> <span class="k">try</span> <span class="kt">FileDescriptor</span><span class="o">.</span><span class="nf">open</span><span class="p">(</span>
  <span class="n">path</span><span class="p">,</span> <span class="o">.</span><span class="n">writeOnly</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="p">[</span><span class="o">.</span><span class="n">append</span><span class="p">,</span> <span class="o">.</span><span class="n">create</span><span class="p">],</span> <span class="nv">permissions</span><span class="p">:</span> <span class="o">.</span><span class="n">ownerReadWrite</span><span class="p">)</span>
<span class="k">try</span> <span class="n">fd</span><span class="o">.</span><span class="n">closeAfter</span> <span class="p">{</span>
  <span class="n">_</span> <span class="o">=</span> <span class="k">try</span> <span class="n">fd</span><span class="o">.</span><span class="nf">writeAll</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">utf8</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="a-multi-platform-library">A Multi-platform Library</h2>

<p><code class="language-plaintext highlighter-rouge">System</code> is a multi-platform library, not a cross-platform one. It provides a separate set of APIs and behaviors on every supported platform, closely reflecting the underlying OS interfaces. A single <code class="language-plaintext highlighter-rouge">import</code> will pull in the native platform interfaces specific for the targeted OS.</p>

<p>Our immediate goal is to simplify building cross-platform libraries and applications such as <a href="https://github.com/apple/swift-nio">SwiftNIO</a> and the <a href="https://github.com/apple/swift-package-manager">Swift Package Manager</a>. <code class="language-plaintext highlighter-rouge">System</code> does not eliminate the need for <code class="language-plaintext highlighter-rouge">#if os()</code> conditionals to implement cross-platform abstractions, but it does make it safer and more expressive to fill out the platform-specific parts.</p>

<h2 id="whats-next">Whatâ€™s Next?</h2>

<p>System is only in its infancyâ€”it currently includes a small number of system calls, currency types, and convenience functionality. As part of the effort to increase the API coverage, weâ€™ll be working to adopt System in the Swift Package Manager. This will include <a href="https://github.com/apple/swift-system/pull/2">enhancements to FilePath</a> and adding support for the recently announced <a href="https://swift.org/blog/swift-on-windows/">Swift on Windows</a>.</p>

<p>Thereâ€™s a ton of exciting work left to do. System (especially the forthcoming Windows support!) is a fantastic opportunity to get involved in the Swift project and help it grow into a strong, vibrant, cross-platform ecosystem.</p>

<h2 id="get-involved">Get Involved</h2>

<p>Your experience, feedback, and contributions are greatly encouraged!</p>

<ul>
  <li>
    <p>Get started by trying out the <a href="https://github.com/apple/swift-system">System package on GitHub</a>,</p>
  </li>
  <li>
    <p>Discuss the library and get help in the <a href="https://forums.swift.org/c/related-projects/system">Swift System forum</a>,</p>
  </li>
  <li>
    <p><a href="https://github.com/apple/swift-system/issues">Open an issue</a> with problems you find or ideas you have for improvements,</p>
  </li>
  <li>
    <p>And as always, <a href="https://github.com/apple/swift-system/pulls">pull requests</a> are welcome!</p>
  </li>
</ul>

<h2 id="questions">Questions?</h2>

<p>Please feel free to ask questions about this post in the <a href="https://forums.swift.org/t/swift-system-is-now-open-source">associated thread</a> on the <a href="https://forums.swift.org/">Swift forums</a>.</p>
:ET