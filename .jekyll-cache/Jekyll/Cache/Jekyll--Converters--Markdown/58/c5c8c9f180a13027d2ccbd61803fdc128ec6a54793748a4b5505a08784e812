I"e@<p>The <a href="https://swift.org/server/">Swift Server Work Group</a> (SSWG) set out <a href="https://forums.swift.org/t/next-steps-for-the-swift-server-work-group/15816">12 months ago</a> to begin defining and prioritizing new efforts to address the needs of the Swift server community. Since then, we’ve been busy meeting regularly, working with the community, defining guidelines, writing Swift packages, voting on proposals, posting in the forums, and much more. We feel that we’ve made significant progress toward those goals we set out last year and we’d like to share a high-level update with you today.</p>

<h2 id="incubation-process">Incubation Process</h2>

<p>We believe that a healthy open source ecosystem relies heavily on the quality of its packages. Because of this, our biggest focus has been on a proposal process for packages (somewhat similar to Swift Evolution) that we call the <a href="https://github.com/swift-server/sswg/blob/master/process/incubation.md">Incubation Process</a>. This process defines how someone with an existing Swift package or new idea can get feedback, follow best practices, and eventually be included in the official Swift server package index.</p>

<p>The incubation process is chock-full of well-considered guidelines and requirements around things like concurrency, testing, and code style. The SSWG is working continuously to improve the Incubation Process and its recommendations. Two ammendments to the process have already been proposed and accepted.</p>

<p>While we want code quality high, we are also cognizant of keeping the barrier to entry as low as possible. To make the incubation process simple and accessible, we use the Swift forums. Pitching your idea or package (the first step of the Incubation Process) is done by creating a new post in the Server &gt; Pitches category.</p>

<p>Once a package has completed the incubation process and been accepted by the SSWG, it will be listed on the Swift server package index. Accepted packages will undergo regular review to ensure they still meet qualifying standards. While still in its humble beginnings, we hope this index will grow to be an invaluable asset to Swift programmers.</p>

<h2 id="libraries">Libraries</h2>

<p><a href="https://github.com/swift-server/sswg/tree/master/proposals">Nine proposals</a> have been accepted via the Incubation Process so far. These packages are being adopted rapidly by upcoming versions of popular server-side Swift frameworks like <a href="https://github.com/vapor/vapor">Vapor 4</a> and <a href="https://github.com/ibm-swift/kitura">Kitura</a>.</p>

<h3 id="swiftnio">SwiftNIO</h3>

<ul>
  <li>Accepted: 9/7/2018</li>
  <li>Author: Apple (<a href="https://github.com/apple/">@apple</a>)</li>
  <li>Code: <a href="https://github.com/apple/swift-nio">github.com/apple/swift-nio</a></li>
</ul>

<blockquote>
  <p>Event-driven network application framework for high performance protocol servers &amp; clients, non-blocking.</p>
</blockquote>

<p>This package is at the heart of the Swift server ecosystem. It provides a common API for network communication that is highly extensible and efficient. Most packages that do networking will either be built on SwiftNIO directly or provide some wrappers for convenient interoperation.</p>

<h3 id="swiftlog">SwiftLog</h3>

<ul>
  <li>Accepted: 2/7/2019</li>
  <li>Author: Johannes Weiss (<a href="https://github.com/weissi/">@weissi</a>)</li>
  <li>Code: <a href="https://github.com/apple/swift-log">github.com/apple/swift-log</a></li>
</ul>

<blockquote>
  <p>A Logging API for Swift</p>
</blockquote>

<p>This universal logging API can be used by any package that would like to output logs, but doesn’t want to worry about which specific logging implementation to use. By using SwiftLog, your package lets the end user choose how to accumulate the information.</p>

<p>Since success of a logging API depends heavily on adoption, the SSWG prioritized development of this package to ensure quality and early availability.</p>

<h3 id="swiftmetrics">SwiftMetrics</h3>

<ul>
  <li>Accepted: 4/4/2019</li>
  <li>Author: Tomer Doron (<a href="https://github.com/tomerd/">@tomerd</a>)</li>
  <li>Code: <a href="https://github.com/apple/swift-metrics">github.com/apple/swift-metrics</a></li>
</ul>

<blockquote>
  <p>A Metrics API for Swift</p>
</blockquote>

<p>SwiftMetrics provides a universal API for metrics. This allows packages to report structured information using meters like gauges, timers, counters, and more. Just like SwiftLog, packages that use the SwiftMetrics API give the end user the freedom to choose which metrics implementation is used.</p>

<h3 id="postgresnio">PostgresNIO</h3>

<ul>
  <li>Accepted: 5/16/2019</li>
  <li>Author: Tanner Nelson (<a href="https://github.com/tanner0101/">@tanner0101</a>)</li>
  <li>Code: <a href="https://github.com/vapor/postgres-nio">github.com/vapor/postgres-nio</a></li>
</ul>

<blockquote>
  <p>Non-blocking, event-driven Swift client for PostgreSQL.</p>
</blockquote>

<p>PostgresNIO is the first database driver to be approved by the SSWG (with many more to come). This Postgres client was built from the ground up on SwiftNIO 2 following best practices as outlined by the Incubation Process.</p>

<p>Using SwiftNIO natively makes this Postgres client much more efficient to run alongside a SwiftNIO HTTP server when compared to a blocking, C-based approach.</p>

<h3 id="redistack">rediStack</h3>

<ul>
  <li>Accepted: 6/27/2019</li>
  <li>Author: Nathan Harris (<a href="https://github.com/mordil">@mordil</a>)</li>
  <li>Code: <a href="https://github.com/Mordil/swift-redi-stack">github.com/Mordil/swift-redi-stack</a></li>
</ul>

<blockquote>
  <p>Non-blocking, event-driven Swift client for Redis.</p>
</blockquote>

<p>Shortly after the Postgres client came RediStack, a Redis client. This package is also built natively on SwiftNIO 2 and takes great care to follow best practices. Given the simplistic nature of Redis’ RESP protocol, this package makes a great example project for anyone interested in making their own database driver.</p>

<h3 id="asynchttpclient">AsyncHTTPClient</h3>

<ul>
  <li>Accepted: 6/27/2019</li>
  <li>Author: Artem Redkin (<a href="https://github.com/artemredkin">@artemredkin</a>)</li>
  <li>Code: <a href="https://github.com/swift-server/async-http-client">github.com/swift-server/async-http-client</a></li>
</ul>

<blockquote>
  <p>HTTP client library built on SwiftNIO</p>
</blockquote>

<p>This package provides an efficient and easy-to-use alternative to <code class="language-plaintext highlighter-rouge">URLSession</code> for Swift server applications. AsyncHTTPClient can be used more efficiently alongside other SwiftNIO-based packages when compared to Linux’s <a href="https://curl.haxx.se">cURL</a>-based <code class="language-plaintext highlighter-rouge">URLSession</code>. This package supports streaming bodies, proxying, cookie parsing, and more.</p>

<h3 id="apnswift">APNSwift</h3>

<ul>
  <li>Accepted: 6/27/2019</li>
  <li>Author: Kyle Browning (<a href="https://github.com/kylebrowning">@kylebrowning</a>)</li>
  <li>Code: <a href="https://github.com/kylebrowning/APNSwift">github.com/kylebrowning/APNSwift</a></li>
</ul>

<blockquote>
  <p>An HTTP/2 APNS library built on swift-nio</p>
</blockquote>

<p>This package makes sending push notifications via APNS easy. It provides a simple API that handles the HTTP/2 connection, payload encoding, and JWT signature creation using ECDSA behind the scenes.</p>

<h3 id="statsdclient">StatsdClient</h3>

<ul>
  <li>Accepted: 8/8/2019</li>
  <li>Author: Tomer Doron (<a href="https://github.com/tomerd/">@tomerd</a>)</li>
  <li>Code: <a href="https://github.com/apple/swift-statsd-client">github.com/apple/swift-statsd-client</a></li>
</ul>

<blockquote>
  <p>Metrics backend for swift-metrics that uses the statsd protocol.</p>
</blockquote>

<p>This package allows the Swift Metrics API to output data to aggregation servers using the statsd protocol.</p>

<h3 id="prometheus">Prometheus</h3>

<ul>
  <li>Accepted: 8/8/2019</li>
  <li>Author: Jari (<a href="https://github.com/MrLotU/">@MrLotU</a>)</li>
  <li>Code: <a href="https://github.com/MrLotU/SwiftPrometheus/">github.com/MrLotU/SwiftPrometheus/</a></li>
</ul>

<blockquote>
  <p>Client-side Prometheus library in Swift</p>
</blockquote>

<p>This package allows the Swift Metrics API to output data to Prometheus.</p>

<h2 id="tooling">Tooling</h2>

<p>Beyond package incubation, the SSWG is also focused on improving Swift and its tooling on Linux.</p>

<h3 id="docker">Docker</h3>

<p>Official Swift images are now available via <a href="https://hub.docker.com/_/swift">Docker hub</a> for Swift 3, 4, and 5 on Ubuntu 16.04 (Xenial) and Ubuntu 18.04 (Bionic). New images are created whenever a new version of Swift is released. In addition to the normal images with everything you need to build and run Swift, there are now “slim” images that contain only what is required to run Swift. These are great for reducing final container size with multi-stage build Docker builds. Checkout the <a href="https://github.com/apple/swift-docker">Swift Docker repo</a> for more information.</p>

<h3 id="swift-backtrace">Swift Backtrace</h3>

<ul>
  <li>Author: Ian Partridge (<a href="https://github.com/ianpartridge">@ianpartridge</a>)</li>
  <li>Code: <a href="https://github.com/ianpartridge/swift-backtrace">github.com/ianpartridge/swift-backtrace</a></li>
</ul>

<p>This package provides support for automatically printing crash backtraces of Swift programs on Linux. Backtraces are generated by a builtin C library <a href="https://github.com/ianlancetaylor/libbacktrace">libbacktrace</a> and demangled using a private Swift runtime call. We hope to improve the implementation by adopting <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0262-demangle.md">SE-0262</a> when it is approved. We are also working with the Swift core team to discuss the benefits of merging this functionality into the Swift standard library.</p>

<h3 id="linux-patch-releases">Linux Patch Releases</h3>

<p>Starting with <a href="https://forums.swift.org/t/announcing-swift-4-2-2-and-monthly-swift-4-2-x-dot-releases-for-linux/20148">Swift 4.2.2</a>, Linux now receives monthly patch releases containing bug fixes. Each patch release receives a review manager responsible for merging patches during a three-week window. After this window closes, the patch is finalized and released on Swift.org. This means that Linux servers will get much faster access than before to bug fixes and improvements in Swift and its core libraries.</p>

<h2 id="future-focus-areas-for-2020">Future: Focus Areas for 2020</h2>

<p>Going forward, our main focus will continue to be on adding new packages to our index. There is a plethora of packages we’d like to see in 2020. Outside of packages, we hope to continue improving Swift and its tooling on servers.</p>

<p>If any of the new focus areas listed below pique your interest, we highly encourage you to get involved. If you are not sure where to begin, consider posting in the <a href="https://forums.swift.org/c/server">Server section</a> of the Swift forums with your questions or ideas. You can also consider more formally <a href="https://github.com/swift-server/sswg/blob/master/process/incubation.md#pitch">pitching</a> your idea to the work group. Check out our <a href="https://github.com/swift-server/sswg/blob/master/process/incubation.md">Incubation Process</a> which describes how to pitch, propose, and submit packages to our index.</p>

<h3 id="database-drivers-and-storage-clients">Database Drivers and Storage Clients</h3>

<p>The SSWG has accepted client implementations for <a href="https://github.com/vapor/nio-postgres">Postgres</a> and <a href="https://github.com/mordil/swift-redis-nio-client">Redis</a>.</p>

<p>Work is being done toward proposing MongoDB clients using both <a href="https://forums.swift.org/t/mongodb-client-using-swiftnio/24666">MongoKitten</a> and the <a href="https://github.com/mongodb/mongo-swift-driver">MongoDB C Driver</a>.</p>

<p>Vapor is planning to pitch two more of its database drivers, <a href="https://github.com/vapor/mysql-nio">MySQLNIO</a> and <a href="https://github.com/vapor/sqlite-nio">SQLiteNIO</a>.</p>

<p>But there are many more databases out there! Zookeeper, Cassandra, and Kafka to name a small few. We highly encourage anyone with expertise in a database driver to consider getting involved.</p>

<h3 id="distributed-tracing">Distributed Tracing</h3>

<p>The first two <a href="https://www.oreilly.com/library/view/distributed-systems-observability/9781492033431/ch04.html">pillars of observability</a> have been accepted: <a href="https://github.com/apple/swift-log">swift-log</a> and <a href="https://github.com/apple/swift-metrics">swift-metrics</a>. Now we need the final piece: tracing. There have been exciting developments in tracing in recent times, such as OpenTracing <a href="https://www.cncf.io/blog/2016/10/11/opentracing-joins-the-cloud-native-computing-foundation/">joining the CNCF</a>. If you are interested in helping design the future of distributed tracing in Swift, we’d love to hear from you.</p>

<h3 id="connection-pooling">Connection Pooling</h3>

<p>Vapor’s <a href="https://github.com/vapor/async-kit/blob/master/Sources/AsyncKit/ConnectionPool.swift">AsyncKit</a> package, <a href="https://github.com/swift-server/async-http-client/pull/105">AsyncHTTPClient</a>, and others are working on connection pool implementations. There are lots of interesting questions coming up already around concurrency and performance. Can there be one connection pool to rule them all, or should there be many separate ones that follow well considered best practices? If you have ideas on how connection pooling in Swift should work, let’s combine forces.</p>

<h3 id="openapi">OpenAPI</h3>

<p><a href="https://github.com/IBM-Swift/Kitura-OpenAPI">Kitura</a> has had support for OpenAPI for a while now and <a href="https://github.com/vapor/open-api">Vapor</a> is beginning to explore the space. We believe there is room here for a shared library. Something that integrates deeply with the SSWG’s accepted solutions for logging, metrics, and tracing is especially important. If you are interested in OpenAPI, consider getting involved.</p>

<h3 id="linux-distros">Linux Distros</h3>

<p>Swift currently offers prebuilt toolchains for Ubuntu. There are many other distros out there and we’d love to see them supported officially. The process for adding a new Linux distro to Swift is not clear at the moment. We think that can be improved. The community could help by identifying which Linux distros are important and contributing reliable build scripts. In a perfect world, we could make this entire system self serve. Does this sound interesting to you? If so, reach out to us.</p>

<h3 id="deployment-guides">Deployment Guides</h3>

<p>Getting your applicaton production-ready can be a daunting process. There are the simple things, like remembering to use <code class="language-plaintext highlighter-rouge">-c release</code>, and the harder things, like writing code that is <a href="https://12factor.net/concurrency">horizontally scalable</a>. Once your app is in production, how do you deal with things like leaks and crashes?</p>

<p>There are lots of things we could do to make this process easier: code templates, how-to guides, information on best practices, etc. If this seems interesting to you, we’d love to hear your ideas.</p>

<h3 id="showing-adoption">Showing Adoption</h3>

<p>“Is server-side Swift production ready?”</p>

<p>YES!</p>

<p>Swift on server is being used in production everywhere by huge and small companies alike. We need to do a better job of showing people this. How can we collect this information? How can we amplify success stories? If you have any ideas, let us know.</p>

<h3 id="and-much-more">And Much More…</h3>

<p>Swift on the server is growing quickly and there’s way more that the SSWG wants to do than we can fit on this list. If you have a great idea that wasn’t listed here, let us know about it on the <a href="https://forums.swift.org/c/server">Swift forums</a>.  There is also a <a href="https://forums.swift.org/t/sswg-annual-update-october-31-2019/30367">matching post</a> for this blog post on the Swift forums if you have specific questions or comments!</p>
:ET