I"±<p>The Swift standard library, along with its tests and inline documentation,
are a part of the <a href="https://github.com/apple/swift" title="Swift repository">main Swift repository</a>.</p>

<h2 id="standard-library-preview-package">Standard Library Preview Package</h2>

<p>The <strong><a href="https://github.com/apple/swift-standard-library-preview/">Standard Library Preview package</a></strong> provides
early access to new additions to the standard library. When new standard
library APIs that can be implemented as a standalone library are accepted
through the Swift Evolution process, they are published as individual
packages and included in the preview package, which acts as an umbrella
library. The preview package currently includes the following individual
packages:</p>

<table>
<tr>
    <th>Package</th>
    <th>Description</th>
</tr>

<tr>
    <td><a href="https://github.com/apple/swift-se0270-range-set/">SE0270_RangeSet</a></td>
    <td>Operations on noncontiguous subranges of collections,  such as <code>subranges(where:)</code> and <code>moveSubranges(_:to:)</code>,  as well as the supporting <code>RangeSet</code> type.</td>
</tr>

<tr>
    <td><a href="https://github.com/apple/swift-se0288-is-power/">SE0288_IsPower</a></td>
    <td>Extends <code>BinaryInteger</code> with an <code>isPower(of:)</code> method  that returns whether an integer is a power of another.</td>
</tr>

</table>

<h2 id="standard-library-design">Standard Library Design</h2>

<p>The Swift standard library encompasses a number of data types,
protocols and functions, including fundamental data types (e.g.,
<code class="language-plaintext highlighter-rouge">Int</code>, <code class="language-plaintext highlighter-rouge">Double</code>), collections (e.g., <code class="language-plaintext highlighter-rouge">Array</code>, <code class="language-plaintext highlighter-rouge">Dictionary</code>) along with
the protocols that describe them and algorithms that operate on them,
characters and strings, and low-level primitives (e.g.,
<code class="language-plaintext highlighter-rouge">UnsafeMutablePointer</code>). The implementation of the standard library
resides in the <code class="language-plaintext highlighter-rouge">stdlib/public</code> subdirectory within the <a href="https://github.com/apple/swift" title="Swift repository">Swift
repository</a>, which is further subdivided into:</p>

<ul>
  <li>
    <p><strong>Standard library core</strong>: The core of the standard library (implemented in <a href="https://github.com/apple/swift/tree/main/stdlib/public/core">stdlib/public/core</a>), including the definitions of all of the data types, protocols, functions, etc.</p>
  </li>
  <li>
    <p><strong>Runtime</strong>: The language support runtime (implemented in <a href="https://github.com/apple/swift/tree/main/stdlib/public/runtime">stdlib/public/runtime</a>), which is layered between the compiler and the core standard library. It is responsible for implementing many of the dynamic features of the language, such as casting (e.g., for the <code class="language-plaintext highlighter-rouge">as!</code> and <code class="language-plaintext highlighter-rouge">as?</code> operators), type metadata (to support generics and reflection), and memory management (object allocation, reference counting, etc.). Unlike higher-level libraries, the runtime is written mostly in C++ or (where needed for interoperability) Objective-C.</p>
  </li>
  <li>
    <p><strong>SDK Overlays</strong>: Specific to Apple platforms, the SDK overlays (implemented in <a href="https://github.com/apple/swift/tree/main/stdlib/public/Darwin">stdlib/public/Darwin</a>) provide Swift-specific additions and modifications to existing Objective-C frameworks to improve their mapping into Swift. In particular, the <code class="language-plaintext highlighter-rouge">Foundation</code> overlay provides additional support for interoperability with Objective-C code.</p>
  </li>
</ul>

<p>The Swift standard library is written in Swift, but because it is the lowest-level Swift code in the stack‚Äîresponsible for implementing the core data types on which other Swift code is built‚Äîit is a bit different from normal Swift code. Some of the differences include:</p>

<ul>
  <li>
    <p><strong>Access to compiler builtins</strong>: The <code class="language-plaintext highlighter-rouge">Builtin</code> module, which is only generally accessible to the standard library, provides compiler builtin functions (e.g., to directly create SIL instructions) and data types (e.g., ‚Äúraw‚Äù pointers, primitive LLVM integer types) needed to implement the data types that are fundamental to programming in Swift.</p>
  </li>
  <li>
    <p><strong>Visibility is often managed by convention</strong>: Standard library declarations often need to have greater visibility than one would generally like, due to the way in which the standard library is compiled and optimized. For example, <code class="language-plaintext highlighter-rouge">private</code> modifiers are never used. More importantly, it is common to need to make something <code class="language-plaintext highlighter-rouge">public</code> even when it is not intended as part of the public interface. In such cases, one should use a leading underscore to indicate that the public API is meant to be private. The policy for access control in the standard library is documented in <a href="https://github.com/apple/swift/blob/main/docs/AccessControlInStdlib.rst">docs/AccessControlInStdlib.rst</a>.</p>
  </li>
  <li>
    <p><strong>Repetitive code uses gyb</strong>: <a href="https://github.com/apple/swift/blob/main/utils/gyb.py">gyb</a> is a simple tool for generating repetitive code from a template that is used often in the standard library. For example, it is used to create the definitions of the various sized integer types (<code class="language-plaintext highlighter-rouge">Int8</code>, <code class="language-plaintext highlighter-rouge">Int16</code>, <code class="language-plaintext highlighter-rouge">Int32</code>, <code class="language-plaintext highlighter-rouge">Int64</code>, etc.) from a single source.</p>
  </li>
  <li>
    <p><strong>Testing is tightly coupled with the compiler</strong>: The standard library and the compiler evolve together and are tightly coupled. Changes in core data types (e.g., <code class="language-plaintext highlighter-rouge">Array</code> or <code class="language-plaintext highlighter-rouge">Int</code>) can require compiler-side changes, and vice-versa, so the standard library test suite is stored within the same directory structure as the compiler, in <a href="https://github.com/apple/swift/tree/main/test/stdlib">test/stdlib</a> and <a href="https://github.com/apple/swift/tree/main/validation-test/stdlib">validation-test/stdlib</a>.</p>
  </li>
</ul>

:ET