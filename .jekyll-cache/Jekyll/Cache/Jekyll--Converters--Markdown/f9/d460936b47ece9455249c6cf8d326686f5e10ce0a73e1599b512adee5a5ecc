I"dB<p>The Package Manager in Swift 4 includes the redesigned <code class="language-plaintext highlighter-rouge">Package.swift</code> manifest
API.  The new API is easier to use and follows the <a href="https://swift.org/documentation/api-design-guidelines/">design guidelines</a>.  The target
inference rules in Swift 3 Package Manager were a common source of confusion. We
revised these rules and removed most of the inference, favoring the practice of
explicitly specifying package structure in the manifest.</p>

<p>Swift 3 packages will continue to work because the Package Manager in Swift 4 is
backwards compatible.  The manifest version is chosen by the <em>tools version</em> of
the package. The tools version is specified in the first line of the manifest,
using the special comment syntax: <code class="language-plaintext highlighter-rouge">// swift-tools-version:&lt;specifier&gt;</code>.
Packages that omit this special comment will default to tools version 3.1.0.</p>

<p>The tools version also determines the default Swift language version used to
compile the package’s sources. Existing Swift 3 packages will compile in Swift
3 compatibility mode.  You can optionally use the <code class="language-plaintext highlighter-rouge">swiftLanguageVersions</code>
property in both Swift 3 and Swift 4 manifests to set the language version used
to compile that package, if you don’t want the default version.  This means it
is possible to upgrade a package to use the newer manifest format without
upgrading its sources to Swift 4.</p>

<h2 id="creating-a-new-package-in-swift-4">Creating a New Package in Swift 4</h2>

<p>Use the <code class="language-plaintext highlighter-rouge">init</code> subcommand to create a new package in Swift 4:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir </span>mytool <span class="o">&amp;&amp;</span> <span class="nb">cd </span>mytool
<span class="nv">$ </span>swift package init
<span class="nv">$ </span>swift build
<span class="nv">$ </span>swift <span class="nb">test</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">Package.swift</code> manifest generated by the commands above is shown below.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// swift-tools-version:4.0</span>
<span class="c1">// The swift-tools-version declares the minimum version of Swift required to build this package.</span>

<span class="kd">import</span> <span class="kt">PackageDescription</span>

<span class="k">let</span> <span class="nv">package</span> <span class="o">=</span> <span class="kt">Package</span><span class="p">(</span>
    <span class="nv">name</span><span class="p">:</span> <span class="s">"mytool"</span><span class="p">,</span>
    <span class="nv">products</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// Products define the executables and libraries produced by a package, and make them visible to other packages.</span>
        <span class="o">.</span><span class="nf">library</span><span class="p">(</span>
            <span class="nv">name</span><span class="p">:</span> <span class="s">"mytool"</span><span class="p">,</span>
            <span class="nv">targets</span><span class="p">:</span> <span class="p">[</span><span class="s">"mytool"</span><span class="p">]),</span>
    <span class="p">],</span>
    <span class="nv">dependencies</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// Dependencies declare other packages that this package depends on.</span>
        <span class="c1">// .package(url: /* package url */, from: "1.0.0"),</span>
    <span class="p">],</span>
    <span class="nv">targets</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// Targets are the basic building blocks of a package. A target defines a module or a test suite.</span>
        <span class="c1">// Targets can depend on other targets in this package, and on products in packages which this package depends on.</span>
        <span class="o">.</span><span class="nf">target</span><span class="p">(</span>
            <span class="nv">name</span><span class="p">:</span> <span class="s">"mytool"</span><span class="p">,</span>
            <span class="nv">dependencies</span><span class="p">:</span> <span class="p">[]),</span>
        <span class="o">.</span><span class="nf">testTarget</span><span class="p">(</span>
            <span class="nv">name</span><span class="p">:</span> <span class="s">"mytoolTests"</span><span class="p">,</span>
            <span class="nv">dependencies</span><span class="p">:</span> <span class="p">[</span><span class="s">"mytool"</span><span class="p">]),</span>
    <span class="p">]</span>
<span class="p">)</span>
</code></pre></div></div>

<p>There are three key differences between the Swift 4 manifest above and the
previous manifest format:</p>

<ol>
  <li>The tools version <code class="language-plaintext highlighter-rouge">4.0</code> is specified using the line <code class="language-plaintext highlighter-rouge">// swift-tools-version:4.0</code>.</li>
  <li>All targets and their dependencies must be explicitly declared.</li>
  <li>Public targets are vended as products using the new product API. Targets in
Swift 4 packages can either depend on products of other packages, or targets
of the same package.</li>
</ol>

<h2 id="custom-target-layouts">Custom Target Layouts</h2>

<p>The new manifest supports customizing the layout of the package. Packages are no
longer required to follow complex, convention-based layout rules.  There is only
one rule: if the target path is not provided, directories <code class="language-plaintext highlighter-rouge">Sources</code>, <code class="language-plaintext highlighter-rouge">Source</code>,
<code class="language-plaintext highlighter-rouge">src</code>, <code class="language-plaintext highlighter-rouge">srcs</code> and <code class="language-plaintext highlighter-rouge">Tests</code> will be searched (in order) to find the target.</p>

<p>Custom layouts make porting C libraries to Swift Package Manager easier. Here
are manifests of two C libraries used in server side Swift community:</p>

<h4 id="libyaml"><a href="https://github.com/yaml/libyaml">LibYAML</a></h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Copyright (c) 2006-2016 Kirill Simonov, licensed under MIT license (https://github.com/yaml/libyaml/blob/master/LICENSE)
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// swift-tools-version:4.0</span>

<span class="kd">import</span> <span class="kt">PackageDescription</span>

<span class="k">let</span> <span class="nv">packages</span> <span class="o">=</span> <span class="kt">Package</span><span class="p">(</span>
    <span class="nv">name</span><span class="p">:</span> <span class="s">"LibYAML"</span><span class="p">,</span>
    <span class="nv">products</span><span class="p">:</span> <span class="p">[</span>
        <span class="o">.</span><span class="nf">library</span><span class="p">(</span>
            <span class="nv">name</span><span class="p">:</span> <span class="s">"libyaml"</span><span class="p">,</span>
            <span class="nv">targets</span><span class="p">:</span> <span class="p">[</span><span class="s">"libyaml"</span><span class="p">]),</span>
    <span class="p">],</span>
    <span class="nv">targets</span><span class="p">:</span> <span class="p">[</span>
        <span class="o">.</span><span class="nf">target</span><span class="p">(</span>
            <span class="nv">name</span><span class="p">:</span> <span class="s">"libyaml"</span><span class="p">,</span>
            <span class="nv">path</span><span class="p">:</span> <span class="s">"."</span><span class="p">,</span>
            <span class="nv">sources</span><span class="p">:</span> <span class="p">[</span><span class="s">"src"</span><span class="p">])</span>
    <span class="p">]</span>
<span class="p">)</span>
</code></pre></div></div>

<h4 id="nodejs-http-parser"><a href="https://github.com/nodejs/http-parser">Node.js http-parser</a></h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Copyright by Authors (https://github.com/nodejs/http-parser/blob/master/AUTHORS), licensed under MIT license (https://github.com/nodejs/http-parser/blob/master/LICENSE-MIT)
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// swift-tools-version:4.0</span>

<span class="kd">import</span> <span class="kt">PackageDescription</span>

<span class="k">let</span> <span class="nv">packages</span> <span class="o">=</span> <span class="kt">Package</span><span class="p">(</span>
    <span class="nv">name</span><span class="p">:</span> <span class="s">"http-parser"</span><span class="p">,</span>
    <span class="nv">products</span><span class="p">:</span> <span class="p">[</span>
        <span class="o">.</span><span class="nf">library</span><span class="p">(</span>
            <span class="nv">name</span><span class="p">:</span> <span class="s">"httpparser"</span><span class="p">,</span>
            <span class="nv">targets</span><span class="p">:</span> <span class="p">[</span><span class="s">"http-parser"</span><span class="p">]),</span>
    <span class="p">],</span>
    <span class="nv">targets</span><span class="p">:</span> <span class="p">[</span>
        <span class="o">.</span><span class="nf">target</span><span class="p">(</span>
            <span class="nv">name</span><span class="p">:</span> <span class="s">"http-parser"</span><span class="p">,</span>
            <span class="nv">publicHeaders</span><span class="p">:</span> <span class="s">"."</span><span class="p">,</span>
            <span class="nv">sources</span><span class="p">:</span> <span class="p">[</span><span class="s">"http_parser.c"</span><span class="p">])</span>
    <span class="p">]</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="dependency-resolution">Dependency Resolution</h2>

<p>Since Swift 3 Package Manager doesn’t understand the Swift 4 manifest format, it
will automatically ignore the Git tags that contain a Swift 4 manifest. So, if
a package upgrades to Swift 4 manifest, Swift 3 Package Manager will pick the
last tag which contains the Swift 3 manifest. However, the Package
Manager in Swift 4 will pick the latest available version, regardless of manifest version.</p>

<h2 id="updating-an-existing-package-to-the-swift-4-manifest-format">Updating an Existing Package to the Swift 4 Manifest Format</h2>

<p>Follow these steps to update existing package to use the Swift 4 manifest format.</p>

<ul>
  <li>
    <p>Update the tools version of the package.</p>

    <p>Use the <code class="language-plaintext highlighter-rouge">tools-version</code> subcommand to update the tools version of the package.</p>
  </li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd </span>mypackage
<span class="nv">$ </span>swift package tools-version <span class="nt">--set-current</span>
</code></pre></div></div>

<ul>
  <li>Move the <code class="language-plaintext highlighter-rouge">dependencies</code> label to precede the <code class="language-plaintext highlighter-rouge">targets</code> label and update the
package dependency syntax. For example:</li>
</ul>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    ...
    dependencies: [
<span class="gd">-    .Package(url: "https://github.com/apple/example-package-fisheryates.git", majorVersion: 2),
</span><span class="gi">+    .package(url: "https://github.com/apple/example-package-fisheryates.git", from: "2.0.0"),
</span>
-    .Package(url: "https://github.com/apple/example-package-playingcard.git", majorVersion: 3, minor: 3),
<span class="gi">+    .package(url: "https://github.com/apple/example-package-playingcard.git", .upToNextMinor(from: "3.3.0")),
</span>    ]
    ...
</code></pre></div></div>

<ul>
  <li>
    <p>Declare all regular and test targets.</p>

    <p>All targets and their dependencies should be explicitly declared. If there
  are two targets, <code class="language-plaintext highlighter-rouge">Foo</code> and <code class="language-plaintext highlighter-rouge">FooTests</code>, declare both of them in <code class="language-plaintext highlighter-rouge">targets</code>
  label. For example:</p>
  </li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="o">...</span>
    <span class="nv">targets</span><span class="p">:</span> <span class="p">[</span>
        <span class="o">.</span><span class="nf">target</span><span class="p">(</span>
            <span class="nv">name</span><span class="p">:</span> <span class="s">"Foo"</span><span class="p">),</span>
        <span class="o">.</span><span class="nf">testTarget</span><span class="p">(</span>
            <span class="nv">name</span><span class="p">:</span> <span class="s">"FooTests"</span><span class="p">,</span>
            <span class="nv">dependencies</span><span class="p">:</span> <span class="p">[</span><span class="s">"Foo"</span><span class="p">]),</span>
    <span class="p">]</span>
    <span class="o">...</span>
</code></pre></div></div>

<ul>
  <li>
    <p>If the package is using the legacy single target layout, update the layout or
  provide the target path.</p>

    <p>The recommended layout is to have one directory per target under the
  <code class="language-plaintext highlighter-rouge">Sources</code> i.e. <code class="language-plaintext highlighter-rouge">Sources/&lt;target-name&gt;</code>. If a package is using this layout,
  the target path will be automatically detected. Otherwise, provide a target
  path. For example:</p>
  </li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="o">...</span>
    <span class="nv">targets</span><span class="p">:</span> <span class="p">[</span>
        <span class="o">.</span><span class="nf">target</span><span class="p">(</span>
            <span class="nv">name</span><span class="p">:</span> <span class="s">"Foo"</span><span class="p">,</span>
            <span class="nv">path</span><span class="p">:</span> <span class="s">"."</span><span class="p">),</span> <span class="c1">// The sources are located in package root.</span>
        <span class="o">.</span><span class="nf">target</span><span class="p">(</span>
            <span class="nv">name</span><span class="p">:</span> <span class="s">"Bar"</span><span class="p">,</span>
            <span class="nv">path</span><span class="p">:</span> <span class="s">"Sources"</span><span class="p">)</span> <span class="c1">// The sources are located in directory Sources/.</span>
    <span class="p">]</span>
    <span class="o">...</span>
</code></pre></div></div>

<ul>
  <li>
    <p>Export public targets using the product API.</p>

    <p>Library packages should explicitly export their public targets to allow
  other packages to import them. Avoid exporting targets like sample code
  targets, test support library etc.</p>
  </li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="o">...</span>
    <span class="nv">products</span><span class="p">:</span> <span class="p">[</span>
        <span class="o">.</span><span class="nf">library</span><span class="p">(</span>
            <span class="nv">name</span><span class="p">:</span> <span class="s">"Foo"</span><span class="p">,</span>
            <span class="nv">targets</span><span class="p">:</span> <span class="p">[</span><span class="s">"Foo"</span><span class="p">,</span> <span class="s">"Bar"</span><span class="p">]),</span>
    <span class="p">],</span>
    <span class="o">...</span>
</code></pre></div></div>

<ul>
  <li>
    <p>Compile in Swift 3 compatibility mode.</p>

    <p>You can update your package manifest to the new format before updating your
  package’s source code to Swift 4.  To do so, set the <code class="language-plaintext highlighter-rouge">swiftLanguageVersions</code>
  property to 3 to build your package in Swift 3 compatibility mode.</p>
  </li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="o">...</span>
    <span class="nv">swiftLanguageVersions</span><span class="p">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span>
    <span class="o">...</span>
</code></pre></div></div>
:ET